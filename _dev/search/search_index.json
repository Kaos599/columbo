{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Columbo TODO: PyPi Release Badge columbo provides a way to specify a dynamic set of questions to ask a user and get their answers. Example User Prompts The primary use of columbo is to define a sequence of interaction that are used to prompt a user to provide answers using a terminal. Below is a sample which shows how this can be used. import columbo interactions = [ columbo . Echo ( \"Welcome to the Columbo example\" ), columbo . Acknowledge ( \"Press enter to start\" ), columbo . BasicQuestion ( \"user\" , \"What is your name?\" , default = \"Patrick\" , ), columbo . BasicQuestion ( \"user_email\" , lambda answers : f \"\"\"What email address should be used to contact { answers [ \"user\" ] } ?\"\"\" , default = \"me@example.com\" ), columbo . Choice ( \"mood\" , \"How are you feeling today?\" , options = [ \"happy\" , \"sad\" , \"sleepy\" , \"confused\" ], default = \"happy\" , ), columbo . Confirm ( \"likes_dogs\" , \"Do you like dogs?\" , default = True ), ] columbo . get_answers ( interactions ) Below shows the output when the user accepts the default values for most of the questions. The user provides a different value for the email and explicitly confirms that they like dogs. Welcome to the Columbo example Press enter to start What is your name? [Patrick]: What email address should be used to contact Patrick? [me@example.com]: patrick@example.com How are you feeling today? 1 - happy 2 - sad 3 - sleepy 4 - confused Enter the number of your choice [1]: Do you like dogs? (Y/n): y {'user': 'Patrick', 'user_email': 'me@example.com', 'mood': 'happy', 'likes_dogs': True} Command Line Answers TODO Where to Start? To learn the basics of how to start using columbo , read the Getting Started page. Detailed Documentation To learn more about the various ways columbo can be used, read the Usage Guide page. API Reference To find specific information about a specific function or class, read the API Reference .","title":"Overview"},{"location":"#columbo","text":"TODO: PyPi Release Badge columbo provides a way to specify a dynamic set of questions to ask a user and get their answers.","title":"Columbo"},{"location":"#example","text":"","title":"Example"},{"location":"#user-prompts","text":"The primary use of columbo is to define a sequence of interaction that are used to prompt a user to provide answers using a terminal. Below is a sample which shows how this can be used. import columbo interactions = [ columbo . Echo ( \"Welcome to the Columbo example\" ), columbo . Acknowledge ( \"Press enter to start\" ), columbo . BasicQuestion ( \"user\" , \"What is your name?\" , default = \"Patrick\" , ), columbo . BasicQuestion ( \"user_email\" , lambda answers : f \"\"\"What email address should be used to contact { answers [ \"user\" ] } ?\"\"\" , default = \"me@example.com\" ), columbo . Choice ( \"mood\" , \"How are you feeling today?\" , options = [ \"happy\" , \"sad\" , \"sleepy\" , \"confused\" ], default = \"happy\" , ), columbo . Confirm ( \"likes_dogs\" , \"Do you like dogs?\" , default = True ), ] columbo . get_answers ( interactions ) Below shows the output when the user accepts the default values for most of the questions. The user provides a different value for the email and explicitly confirms that they like dogs. Welcome to the Columbo example Press enter to start What is your name? [Patrick]: What email address should be used to contact Patrick? [me@example.com]: patrick@example.com How are you feeling today? 1 - happy 2 - sad 3 - sleepy 4 - confused Enter the number of your choice [1]: Do you like dogs? (Y/n): y {'user': 'Patrick', 'user_email': 'me@example.com', 'mood': 'happy', 'likes_dogs': True}","title":"User Prompts"},{"location":"#command-line-answers","text":"TODO","title":"Command Line Answers"},{"location":"#where-to-start","text":"To learn the basics of how to start using columbo , read the Getting Started page.","title":"Where to Start?"},{"location":"#detailed-documentation","text":"To learn more about the various ways columbo can be used, read the Usage Guide page.","title":"Detailed Documentation"},{"location":"#api-reference","text":"To find specific information about a specific function or class, read the API Reference .","title":"API Reference"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] [0.8.0] - 2020-02-17 Added All Interaction s gained a copy() method to allow for creating slightly altered instances of an existing Interaction . parse_args() and format_cli_help() accept an optional parser_name to be displayed in errors and help text. Changed Stop producing universal wheels. Fixed StaticOrDynamicValue enforces that the result of the callable must be the same type as the static type. Removed DynamicValue is no longer exposed as a type alias. [0.7.0] - 2020-02-10 Added format_cli_help() function to produce CLI help text. Changed Type hints on public API. Be more restrictive when functions should not be making mutations. Be less restrictive when functions don't rely on specific implementations. Fixed CliException inherits from ColumboException . Raise DuplicateQuestionNameException if a list of interactions contains multiple questions with the same name. The same exception is also raised when an existing answers dictionary already contains a name used by a given questions. [0.6.0] - 2020-01-13 Added parse_args() function now accepts an initial dictionary of answers . Fixed Expose additional type hints used in signatures of public API. [0.5.0] - 2020-01-06 Added exit_on_error added to parse_args() as an optional argument. When False , the function will raise an exception instead of exiting the application if the arguments can't be parsed. Changed Rewrote Columbo example script text. Made example script stand alone. Test against each supported python version in CI. Add support for python 3.8. Use prompt-toolkit for user interaction instead of click . Mark user_io sub-module as private. Expose exception types raised by library. Fixed Add Args class that user_io relies on. Explicit type is required for singledispatch on python 3.6. Specify minimum supported python version. Removed Ability to run the module as an application. Dynamic loading of questions from a file. [0.4.0] - 2019-12-17 Changed return type of Validator return type updated from bool to Optional[str] is_valid function updated to validate , return type updated from bool to Optional[str] Fixed BasicQuestion constructor now respects the validator argument If validator callable provided, question will be asked until validator returns True [0.3.0] - 2019-11-21 get_answers() takes optional answers dict, appending new answers to this as opposed to new dictionary [0.2.0] - 2019-11-08 Added get_answers() takes list of interactions and builds dict of answers, handling user I/O [0.1.0] - 2019-10-15 Initial Release","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"[Unreleased]"},{"location":"CHANGELOG/#080-2020-02-17","text":"","title":"[0.8.0] - 2020-02-17"},{"location":"CHANGELOG/#added","text":"All Interaction s gained a copy() method to allow for creating slightly altered instances of an existing Interaction . parse_args() and format_cli_help() accept an optional parser_name to be displayed in errors and help text.","title":"Added"},{"location":"CHANGELOG/#changed","text":"Stop producing universal wheels.","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"StaticOrDynamicValue enforces that the result of the callable must be the same type as the static type.","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"DynamicValue is no longer exposed as a type alias.","title":"Removed"},{"location":"CHANGELOG/#070-2020-02-10","text":"","title":"[0.7.0] - 2020-02-10"},{"location":"CHANGELOG/#added_1","text":"format_cli_help() function to produce CLI help text.","title":"Added"},{"location":"CHANGELOG/#changed_1","text":"Type hints on public API. Be more restrictive when functions should not be making mutations. Be less restrictive when functions don't rely on specific implementations.","title":"Changed"},{"location":"CHANGELOG/#fixed_1","text":"CliException inherits from ColumboException . Raise DuplicateQuestionNameException if a list of interactions contains multiple questions with the same name. The same exception is also raised when an existing answers dictionary already contains a name used by a given questions.","title":"Fixed"},{"location":"CHANGELOG/#060-2020-01-13","text":"","title":"[0.6.0] - 2020-01-13"},{"location":"CHANGELOG/#added_2","text":"parse_args() function now accepts an initial dictionary of answers .","title":"Added"},{"location":"CHANGELOG/#fixed_2","text":"Expose additional type hints used in signatures of public API.","title":"Fixed"},{"location":"CHANGELOG/#050-2020-01-06","text":"","title":"[0.5.0] - 2020-01-06"},{"location":"CHANGELOG/#added_3","text":"exit_on_error added to parse_args() as an optional argument. When False , the function will raise an exception instead of exiting the application if the arguments can't be parsed.","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Rewrote Columbo example script text. Made example script stand alone. Test against each supported python version in CI. Add support for python 3.8. Use prompt-toolkit for user interaction instead of click . Mark user_io sub-module as private. Expose exception types raised by library.","title":"Changed"},{"location":"CHANGELOG/#fixed_3","text":"Add Args class that user_io relies on. Explicit type is required for singledispatch on python 3.6. Specify minimum supported python version.","title":"Fixed"},{"location":"CHANGELOG/#removed_1","text":"Ability to run the module as an application. Dynamic loading of questions from a file.","title":"Removed"},{"location":"CHANGELOG/#040-2019-12-17","text":"","title":"[0.4.0] - 2019-12-17"},{"location":"CHANGELOG/#changed_3","text":"return type of Validator return type updated from bool to Optional[str] is_valid function updated to validate , return type updated from bool to Optional[str]","title":"Changed"},{"location":"CHANGELOG/#fixed_4","text":"BasicQuestion constructor now respects the validator argument If validator callable provided, question will be asked until validator returns True","title":"Fixed"},{"location":"CHANGELOG/#030-2019-11-21","text":"get_answers() takes optional answers dict, appending new answers to this as opposed to new dictionary","title":"[0.3.0] - 2019-11-21"},{"location":"CHANGELOG/#020-2019-11-08","text":"","title":"[0.2.0] - 2019-11-08"},{"location":"CHANGELOG/#added_4","text":"get_answers() takes list of interactions and builds dict of answers, handling user I/O","title":"Added"},{"location":"CHANGELOG/#010-2019-10-15","text":"Initial Release","title":"[0.1.0] - 2019-10-15"},{"location":"api/","text":"Reference TODO","title":"Reference"},{"location":"api/#reference","text":"TODO","title":"Reference"},{"location":"getting-started/","text":"Getting Started Installation To install columbo , simply run this simple command in your terminal of choice: shell script $ python -m pip install columbo Basic Usage Examples TODO Read the Usage Guide for a more detailed descriptions of the ways columbo can be used.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"To install columbo , simply run this simple command in your terminal of choice: shell script $ python -m pip install columbo","title":"Installation"},{"location":"getting-started/#basic-usage-examples","text":"TODO Read the Usage Guide for a more detailed descriptions of the ways columbo can be used.","title":"Basic Usage Examples"},{"location":"usage-guide/","text":"Usage Guide TODO","title":"Usage Guide"},{"location":"usage-guide/#usage-guide","text":"TODO","title":"Usage Guide"}]}